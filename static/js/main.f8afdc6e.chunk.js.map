{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlfor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f8afdc6e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/*<Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>*/}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/*<li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n\r\n    </li>*/}\r\n                        \r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                    {/*<form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form>*/}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes={title: PropTypes.string.isRequired, aboutText: PropTypes.string.isRequired}\r\nNavbar.defaultProps={\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n};","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n        //console.log(\"Uppercase was clicked\"+text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\",\"success\");\r\n    }\r\n    const handleLoClick=()=>{\r\n        //console.log(\"Uppercase was clicked\"+text);\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase!\",\"success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        //console.log(\"On Change\");\r\n        setText(event.target.value);\r\n       // props.showAlert(\"Text Cleared!\",\"success\");\r\n    }\r\n    const handleClearClick=()=>{\r\n        let newText= ' ';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\",\"success\");\r\n    }\r\n    const[text,setText]=useState('');\r\n    const handleCopy = () =>{\r\n        //console.log(\"copy\");\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied!\",\"success\");\r\n    }\r\n    const handleSpaces = () =>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces Removed!\",\"success\");\r\n    } \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white',color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleSpaces}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008*text.split(\" \").length} Minutes read time</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Enter in TextBox to Preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            \r\n            <strong>{capitalize(props.alert.type)}</strong> :{props.alert.msg} \r\n            {/*<button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1500);\n\n  }\n  const toggleMode=() =>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title='TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title='TextUtils is amazing Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title='Install TextUtils which is amazing';\n      // }, 1800);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title='TextUtils - Light Mode';\n    }\n  }\n    return ( \n      <>\n      {/*<Router>*/}\n\n        <Navbar title=\"TextUtils\"  mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        \n\n          <div className=\"container my-3\">\n          {/*<Switch>*/}\n            {/* /users --> Component 1\n        /users/home --> Component 2 */}\n            {/*<Route exact path=\"/about\">\n              <About/>\n      </Route>\n      <Route exact path=\"/\">*/}\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n            {/*</Route>\n          </Switch>\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>*/}\n          </div>\n      {/*</Router>*/}\n      </>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}